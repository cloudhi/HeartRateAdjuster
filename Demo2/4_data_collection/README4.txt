Read Me for Data Management Demo 2:

The Data Management section for the first Demonstration was done in Android on an emulator. To run this code, you must first download Eclipse with the Android Development Tools plugin. After the plugin is properly downloaded, you must open Eclipse and set up an emulator. This can be done by following the instructions in the Android Virtual Device Manager menut. Once the emulator and the Eclipse environment have been setup, then you must go into Eclipse and select "New". This menu will give you the option to create an Android project from existing code. Select this option, and browse through the directories and find the folder which contains the code for this demonstration, which is in the folder titled "dataManagement". Once the filepath has been set, click "Finish", and the code should be in available in Eclipse. Then, click run.

The emulator should then pop up and present the application with the main screen. Three buttons should be present; "store", "retrieve", and "graph" should be the options. To test, press the buttons in the order of "store", then "retrieve". To see the results of each of these options, open the LogCat screen in the Eclipse environment. All the results of the operation get printed there. In the case of Android, the scripts that test the features are the code written in the different Activity files (ex. MainActivity, RetrieveActivity, StoreActivity). These files make use of the different classes and their functionalities in order to test the different functions of our project. They are the files that perform the unit testing on the classes, which are placed in separate files. In summary, the classes and their implementations are defined in separate files, and the activity files are the scripts that test each of the functions within those classes.

To test the graphing feature, import the folder called "jfreeSample" in the same way described above. Click the run button. To see whether the application ran correctly, look for the statement "printed the picture" in the LogCat menu. If this statement appears, then check the jfreeSample directory for a .png file named testGraph.png. This is the output of the test, and should be a randomized graph of heart rates. The script in this case is the plain LinePlot.java file, and its purpose to make sure that a graph can be printed and saved using the data retrieved from the records.
